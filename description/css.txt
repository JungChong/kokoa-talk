#box
    #block
        대부분의 box들은 block
        그 옆에 아무것도 올 수 없어
        높이와 너비가 있어
    margin
        box의 border(경계)의 바깥에 있는 공간
        margin: 20px 0px;(상하20px, 좌우0px)
        margin: 20px 5px 12px 9px;(상 우 하 좌)
            padding에서도 같음
    #Collapsing margins
        내용물의 border와 box의 경계가 같을 때 두 box의 margin을 하나로 봄
        상하에서만 발생
    padding
        경계로부터 안쪽 공간
    border
        border: 2px solid black;(line-width line-style color)
            dashed, solid
        border-style
        border-radius(반지름,반경)
    layer

#inline
    span a image등으로 옆에 다른 요소가 올 수 있음
    높이와 너비가 없어서 height와 width적용 불가
    top bottom에 margin을 가질 수 없음(padding은 가능)

    height: 100vh에서 vh는 viewpert(screen) height
    display속성으로 block,inline을 바꿀 수 있어

#class
    하나의 element가에 여러개의 클래스를 가질 수 있어

#flexbox [게임 https://flexboxfroggy.com/#ko]
    박스들을 어떤 곳이들 둘 수 있어서 좋아
    자식 엘리먼트에 말하지 않고 부모 엘리먼트에만 말한다
    부모 엘리먼트를 flex container로 만들어야해
        display:flex
    자식들이 element를 가지고있다면 자식들 또한 부모가 될 수있어.
    flex container는 두개의 축을 가지고있는데 main axis(디폴트값=horizontal)와 cross axis(디폴트값=vertical)
        justify-content는 main axis
        align-items는 cross axis
    부모에게 height가 없다면 align-items를 설정하더라도 바뀌지 않는다
        부모에게 height를 준땐 vh로 주는 경우가 많다(화면의 몇%?의 의미)
    부모가 자식을 컨트롤 할 수 있다
    룰 1. 자식에게 명시하지 않고 부모에게 명시한다. 부모를 display:flex로 만든다
    룰 2. 주축(main axis), 교차축(cross axis)
        main axis
            horizontal
                해당 속성들 ex) justify-content
        cross axis
            vertical
                해당 속성들 ex) align-items
        flex-direction으로 디폴트값 변경가능
    - Flex-wrap: wrap/ nowrap
        Wrap : block 이 겹치지 않게
    - Flex-direction: column-reverse
    - Flex-direction: row-reverse
    - Flex-wrap: wrap-reverse


#position
    fixed
        스크롤해도 처음 자신의 위치에 고정.
        top left bottom right 프로퍼티 중에서 하나만 수정해도 레이어가 바뀜
    static (position의 디폴트값)
    relative
        top left bottom right으로 디폴트값 기준 상하좌우로 움직임
    absolute
        top left bottom right
        태그를 하나씩 빠져나가며 가장 가까운 relative 부모를 찾아 그 부모를 기준으로 이동
        못찾으면 body기준


#pseudo selectors
    좀 더 세부적으로 엘리먼트를 선택해주는 것
    class나 id를 만드는 것보다 훨씬 좋은 방법이다
        div:last-child 
        div:first-child 
        span:nth-child(even) 
        span:nth-child(2n+1)
        input:optional
        input:required


#combinator [게임 https://flukeout.github.io/#]
    p span{} 부모자식관계
    p>span{} 부모와 바로 밑 자식관계
    p+span{} 바로 다음에 오는 형제관계
    p~span{} 바로 다음에 오지 않아도 되는 형제관계


#attribute
    input[type="word"]{} type="word"인 input만을 선택
    input[type~="word"]{} "word"를 포함하는 input선택(앞뒤에 다른 문자없이)
    input[type*="word"]{} "word"를 포함하는 input선택
    input[type$="word"]{} 끝에 "word"가 오는 input 선택
    input[type^="word"]{} 앞에 "word"가 오는 input 선택


#state
    :hover 커서가 올라간상태
    :active 클릭할때, 때면 끝
    :focus 선택한 경우
    :visited link에서 쓰이고 사이트를 방문한 이력이 있을경우
    :focus-within 자식들중 하나라도 focus상태에 있다면 부모에게 적용


#pseudo element 콜론이 2개
    ::placeholder placehoder만을 꾸밀때 사용
    ::selection 드래그 했을때
    ::first-letter 앞 글자에
    ::first-line 첫 줄

#color
    hexadecimal color(16진수 컬러) #000000;
    RGB 방식 rgb(252, 206, 0);
    RGBA 방식 rgba(252, 206, 0, 0.5); 0~1사이 alpa(투명도)값 지정

#Variable(custom properties)
    :root라는 엘리먼트에 변수를 추가
    ex) --main-color: #489ee3;
        --default-border: 1px solid var(--main-color);
    사용 할 때는 var(--main-color)